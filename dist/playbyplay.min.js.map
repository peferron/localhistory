{"version":3,"sources":["playbyplay.js","playbyplay.min.js"],"names":["global","factory","exports","module","define","amd","playbyplay","this","check","supportsLocalStorage","Error","supportsJSON","supportsIsArray","storage__save","run","runs","undefined","storage__load","err","length","sameRun","push","saveRuns","a","b","JSON","stringify","maxRuns","splice","runsStr","maxLength","removeFirstHalf","localStorage","runsKey","isQuotaError","arr","Math","ceil","code","name","parse","Array","isArray","storage__clear","removeItem","index__save","callback","setTimeout","storage","save","index__load","load","index__clear","clear","key","value","random","e","window","Object","defineProperties","get","configurable","enumerable","maxBytes"],"mappings":"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","file":"playbyplay.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    factory((global.playbyplay = {}))\n}(this, function (exports) { 'use strict';\n\n    const supportsLocalStorage = (() => {\n        const key = 'playbyplay_support_Vo8yTd6aLS$A8huo9$e7';\n        const value = Math.random() + '';\n\n        try {\n            localStorage[key] = value;\n            if (localStorage[key] !== value) {\n                return false;\n            }\n        } catch (e) {\n            return false;\n        }\n\n        return true;\n    })();\n\n    const supportsJSON = typeof window !== 'undefined' &&\n        'JSON' in window &&\n        'parse' in JSON &&\n        'stringify' in JSON;\n\n    const supportsIsArray = 'isArray' in Array;\n\n    function check() {\n        if (!supportsLocalStorage) {\n            throw new Error('localStorage is not supported');\n        }\n\n        if (!supportsJSON) {\n            throw new Error('JSON is not supported');\n        }\n\n        if (!supportsIsArray) {\n            throw new Error('Array.isArray is not supported');\n        }\n    }\n\n    var storage = {\n        get save () { return storage__save; },\n        get load () { return storage__load; },\n        get clear () { return storage__clear; }\n    };\n\n    const runsKey = 'playbyplay_runs_A*O%y21#Q1WSh^f09YO!';\n\n    // Max history size in bytes.\n    const maxBytes = 50000;\n\n    // Max length of the history string. Assumes 16 bits per character.\n    const maxLength = maxBytes * 8 / 16;\n\n    // Max runs in history.\n    const maxRuns = 200;\n\n    // Save\n\n    function storage__save(run) {\n        let runs;\n        try {\n            runs = storage__load();\n        } catch (err) {\n            runs = [];\n        }\n\n        if (runs.length && sameRun(run, runs[runs.length - 1])) {\n            return;\n        }\n\n        runs.push(run);\n        saveRuns(runs);\n    }\n\n    function sameRun(a, b) {\n        return JSON.stringify(a) === JSON.stringify(b);\n    }\n\n    function saveRuns(runs) {\n        if (runs.length > maxRuns) {\n            runs.splice(0, runs.length - maxRuns);\n        }\n\n        while (true) { // eslint-disable-line no-constant-condition\n            let runsStr = JSON.stringify(runs);\n\n            if (runsStr.length > maxLength) {\n                if (runs.length < 2) {\n                    throw new Error(`Could not save run of length ${runsStr.length}, ` +\n                        `the maximum length is ${maxLength}`);\n                }\n\n                removeFirstHalf(runs);\n                continue;\n            }\n\n            try {\n                localStorage[runsKey] = runsStr;\n                return;\n            } catch (err) {\n                if (isQuotaError(err)) {\n                    if (runs.length < 2) {\n                        throw new Error(`Could not save run of length ${runsStr.length}, ` +\n                            `exceeds localStorage quota`);\n                    }\n\n                    removeFirstHalf(runs);\n                    continue;\n                }\n\n                throw err;\n            }\n        }\n    }\n\n    function removeFirstHalf(arr) {\n        arr.splice(0, Math.ceil(arr.length / 2));\n    }\n\n    function isQuotaError(err) {\n        return err &&\n            (err.code === 22 ||\n             err.code === 1014 && err.name === 'NS_ERROR_DOM_QUOTA_REACHED');\n    }\n\n    // Load\n\n    function storage__load() {\n        const runsStr = localStorage[runsKey];\n        if (!runsStr) {\n            return [];\n        }\n\n        const runs = JSON.parse(runsStr);\n        if (!Array.isArray(runs)) {\n            throw new Error('Loaded runs are not an Array');\n        }\n\n        return runs;\n    }\n\n    // Clear\n\n    function storage__clear() {\n        localStorage.removeItem(runsKey);\n    }\n\n    function index__save(run, callback) {\n        setTimeout(() => {\n            try {\n                check();\n                storage.save(run);\n                callback(null);\n            } catch (err) {\n                callback(err);\n            }\n        }, 0);\n    }\n\n    function index__load(callback) {\n        try {\n            check();\n            const runs = storage.load();\n            callback(null, runs);\n        } catch (err) {\n            callback(err);\n        }\n    }\n\n    function index__clear(callback) {\n        try {\n            check();\n            storage.clear();\n            callback(null);\n        } catch (err) {\n            callback(err);\n        }\n    }\n\n    exports.save = index__save;\n    exports.load = index__load;\n    exports.clear = index__clear;\n\n}));\n",null],"sourceRoot":"/source/"}